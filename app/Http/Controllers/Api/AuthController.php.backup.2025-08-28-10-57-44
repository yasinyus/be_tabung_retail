<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use App\Models\User;
use App\Models\Pelanggan;
use App\Models\TabungActivity;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Auth;
use Illuminate\Validation\ValidationException;

class AuthController extends Controller
{
    /**
     * Universal login endpoint - auto detect user type (no role parameter needed)
     */
    public function login(Request $request)
    {
        $request->validate([
            'email' => 'required|email',
            'password' => 'required',
        ]);

        // Try to find user in Users table first
        $user = User::where('email', $request->email)->first();
        
        if ($user && Hash::check($request->password, $user->password)) {
            // Login as User (Admin/Staff)
            $token = $user->createToken('auth-token')->plainTextToken;
            
            return response()->json([
                'status' => 'success',
                'message' => 'Login successful',
                'user_type' => 'admin',
                'user' => [
                    'id' => $user->id,
                    'name' => $user->name,
                    'email' => $user->email,
                    'roles' => $user->role ?? 'user', // ✅ Consistent dengan database column
                ],
                'token' => $token
            ]);
        }

        // Try to find in Pelanggan table
        $pelanggan = Pelanggan::where('email', $request->email)->first();
        
        if ($pelanggan && Hash::check($request->password, $pelanggan->password)) {
            // Login as Pelanggan
            $token = $pelanggan->createToken('auth-token')->plainTextToken;
            
            return response()->json([
                'status' => 'success',
                'message' => 'Login successful',
                'user_type' => 'pelanggan',
                'user' => [
                    'id' => $pelanggan->id,
                    'name' => $pelanggan->nama_lengkap,
                    'email' => $pelanggan->email,
                    'phone' => $pelanggan->no_telp,
                ],
                'token' => $token
            ]);
        }

        // No user found
        throw ValidationException::withMessages([
            'email' => ['The provided credentials are incorrect.'],
        ]);
    }

    /**
     * Logout user
     */
    public function logout(Request $request)
    {
        $request->user()->currentAccessToken()->delete();

        return response()->json([
            'status' => 'success',
            'message' => 'Logged out successfully'
        ]);
    }

    /**
     * Get user profile
     */
    public function profile(Request $request)
    {
        $user = $request->user();
        
        // Check if it's User model or Pelanggan model
        if ($user instanceof User) {
            return response()->json([
                'status' => 'success',
                'user_type' => 'admin',
                'user' => [
                    'id' => $user->id,
                    'name' => $user->name,
                    'email' => $user->email,
                    'roles' => $user->role ?? 'user', // ✅ Consistent dengan database column
                ]
            ]);
        } else {
            return response()->json([
                'status' => 'success',
                'user_type' => 'pelanggan',
                'user' => [
                    'id' => $user->id,
                    'name' => $user->nama_lengkap,
                    'email' => $user->email,
                    'phone' => $user->no_telp,
                ]
            ]);
        }
    }

    /**
     * Mobile dashboard data
     */
    public function dashboard(Request $request)
    {
        $user = $request->user();
        
        if (!$user) {
            return response()->json([
                'status' => 'error',
                'message' => 'Unauthorized'
            ], 401);
        }

        // Basic dashboard data
        return response()->json([
            'status' => 'success',
            'message' => 'Dashboard data retrieved',
            'data' => [
                'user_type' => $user instanceof User ? 'admin' : 'pelanggan',
                'user_name' => $user instanceof User ? $user->name : $user->nama_lengkap,
                'timestamp' => now()->format('Y-m-d H:i:s'),
                'server_status' => 'online'
            ]
        ]);
    }

    /**
     * Terima Tabung - Mobile Form API
     * Sesuai dengan form mobile: Lokasi Gudang, Armada, List Tabung, Status, Tanggal, Keterangan
     */
    public function terimaTabung(Request $request)
    {
        $user = $request->user();
        
        if (!$user) {
            return response()->json([
                'status' => 'error',
                'message' => 'Unauthorized'
            ], 401);
        }

        // Validasi input sesuai form mobile
        $request->validate([
            'lokasi_gudang' => 'required|string|max:100', // Lokasi Gudang (scan/input)
            'armada' => 'required|string|max:100', // Armada (scan/input)
            'list_tabung' => 'required|array|min:1', // List Tabung (array of cylinder IDs)
            'list_tabung.*' => 'required|string|max:50',
            'status' => 'required|string|in:Isi,Kosong,Rusak', // Status dropdown
            'tanggal' => 'required|date_format:d/m/Y', // Tanggal (dd/mm/yyyy)
            'keterangan' => 'nullable|string|max:500' // Keterangan (optional notes)
        ]);

        try {
            // Data otomatis
            $nama_user = $user instanceof User ? $user->name : $user->nama_lengkap;
            $total_tabung = count($request->list_tabung);
            $tanggal_aktivitas = \Carbon\Carbon::createFromFormat('d/m/Y', $request->tanggal)->format('Y-m-d');

            // Simulasi validasi QR/Barcode (nanti bisa disesuaikan dengan database real)
            $lokasi_valid = $this->validateQrCode($request->lokasi_gudang, 'gudang');
            $armada_valid = $this->validateQrCode($request->armada, 'armada');
            
            if (!$lokasi_valid) {
                return response()->json([
                    'status' => 'error',
                    'message' => 'QR Code Lokasi Gudang tidak valid'
                ], 400);
            }

            if (!$armada_valid) {
                return response()->json([
                    'status' => 'error',
                    'message' => 'QR Code Armada tidak valid'
                ], 400);
            }

            // Validasi setiap tabung dalam list
            $tabung_invalid = [];
            foreach ($request->list_tabung as $index => $tabung_id) {
                if (!$this->validateQrCode($tabung_id, 'tabung')) {
                    $tabung_invalid[] = $index + 1;
                }
            }

            if (!empty($tabung_invalid)) {
                return response()->json([
                    'status' => 'error',
                    'message' => 'QR Code Tabung tidak valid',
                    'invalid_tabung' => $tabung_invalid
                ], 400);
            }

            // Generate transaksi ID
            $transaksi_id = 'TRX-' . now()->format('YmdHis');
            
            // Simpan ke database menggunakan TabungActivity model
            $tabungActivity = TabungActivity::create([
                'activity' => 'Terima Tabung',
                'nama_user' => $nama_user,
                'qr_tabung' => $request->list_tabung, // JSON array of cylinder IDs
                'lokasi_gudang' => $request->lokasi_gudang,
                'armada' => $request->armada,
                'keterangan' => $request->keterangan,
                'status' => $request->status, // From dropdown: Isi, Kosong, Rusak
                'user_id' => $user->id,
                'transaksi_id' => $transaksi_id,
                'tanggal_aktivitas' => $tanggal_aktivitas
            ]);

            return response()->json([
                'status' => 'success',
                'message' => "Data berhasil disimpan! {$total_tabung} tabung telah diterima.",
                'data' => [
                    'transaksi_id' => $transaksi_id,
                    'lokasi_gudang' => $request->lokasi_gudang,
                    'armada' => $request->armada,
                    'total_tabung' => $total_tabung,
                    'list_tabung' => $request->list_tabung,
                    'status' => $request->status,
                    'tanggal' => $request->tanggal,
                    'keterangan' => $request->keterangan,
                    'nama_user' => $nama_user,
                    'timestamp' => now()->format('Y-m-d H:i:s')
                ]
            ], 200);

        } catch (Exception $e) {
            return response()->json([
                'status' => 'error',
                'message' => 'Terjadi kesalahan saat menyimpan data',
                'error' => $e->getMessage()
            ], 500);
        }
    }

    /**
     * Validasi QR Code (simulasi - nanti disesuaikan dengan database)
     */
    private function validateQrCode($qr_code, $type)
    {
        try {
            // Decode QR code (base64 decoded JSON)
            if (is_string($qr_code) && strlen($qr_code) > 100) {
                // Might be base64 encoded SVG, try to decode
                $decoded = base64_decode($qr_code);
                if ($decoded !== false && str_contains($decoded, 'svg')) {
                    // This is a base64 encoded SVG, extract data from it
                    // For now, assume it's valid if it's properly encoded SVG
                    return true;
                }
            }
            
            // Try to parse as JSON (direct QR data)
            $qr_data = json_decode($qr_code, true);
            if (json_last_error() === JSON_ERROR_NONE && is_array($qr_data)) {
                // Validate based on QR data structure
                switch ($type) {
                    case 'gudang':
                        return isset($qr_data['type']) && $qr_data['type'] === 'gudang' 
                            && isset($qr_data['code']) && str_starts_with($qr_data['code'], 'GDG-');
                            
                    case 'armada':
                        return isset($qr_data['id']) && isset($qr_data['nopol']);
                        
                    case 'tabung':
                        return isset($qr_data['id']) && isset($qr_data['code']);
                        
                    default:
                        return false;
                }
            }
            
            // Fallback: validate as simple code format
            switch ($type) {
                case 'gudang':
                    return str_starts_with($qr_code, 'GDG-');
                    
                case 'armada':
                    // More flexible pattern for armada (license plates)
                    return strlen($qr_code) >= 3;
                    
                case 'tabung':
                    return str_starts_with($qr_code, 'T-') || str_starts_with($qr_code, 'TBG-');
                    
                default:
                    return false;
            }
            
        } catch (Exception $e) {
            // If any error occurs, assume invalid
            return false;
        }
    }
}
